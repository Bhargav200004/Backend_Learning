#!/usr/bin/env bash
set -e

# 1. Pick staged JS/TS source files (skip __test__ and *.test.*)
FILES=$(git diff --cached --name-only --diff-filter=ACMR |
        grep -E '^src/.*\.(jsx?|tsx?)$' |
        grep -vE '__test__|\.test\.(jsx?|tsx?)$')

# 2. If no source files changed, exit early
if [ -z "$FILES" ]; then
  echo "🟡 No src/* code changes – skipping tests, coverage, and lint."
  exit 0
fi

# 3. Ensure every changed source file has a matching test file
MISSING=0
for FILE in $FILES; do
  base=$(basename "$FILE" | sed -E 's/\.(jsx?|tsx?)$//')
  ext="${FILE##*.}"
  test_path=$(find src/__test__ -type f -name "${base}.test.${ext}" | head -n1)
  if [ -z "$test_path" ]; then
    echo "❌ Missing test for $FILE  (expecting src/__test__/**/${base}.test.${ext})"
    MISSING=1
  fi
done
[ "$MISSING" -eq 1 ] && { echo "🚫 Commit rejected – add the missing tests."; exit 1; }

# 4. Run the unit tests
echo "🧪 Running tests…"
npm test || { echo "🚫 Commit rejected – tests failed."; exit 1; }

# 5. Per‑file coverage ≥ 80 %
echo "📊 Checking coverage per file (≥ 80 %)…"
COVER_OK=1
for FILE in $FILES; do
  if ! npx vitest run --coverage.enabled true --coverage.include="$FILE" --coverage.threshold.lines=80 >/dev/null; then
    echo "❌ Coverage below 80 % for $FILE"
    COVER_OK=0
  fi
done
[ "$COVER_OK" -eq 0 ] && { echo "🚫 Commit rejected – increase coverage."; exit 1; }

# 6. Lint‑staged (ESLint / Prettier / whatever you configured)
echo "🧹 Running lint‑staged…"
if ! npx lint-staged; then
  echo "🚫 Commit rejected – lint‑staged found problems."
  exit 1
fi

echo "✅ All pre‑commit checks passed – good to go!"
